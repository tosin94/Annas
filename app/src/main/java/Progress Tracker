                       #################################   PROGRESS TRACKER/TO-DO FOR APP DEVELOPMENT ###############################

## different font definitions can be found at -> https://developer.android.com/guide/topics/resources/more-resources.html#Dimension ##
## another useful link -> https://material.io/guidelines/layout/units-measurements.html#units-measurements-scaleable-pixels-sp ##
##  recycler view with multiple views -> https://www.journaldev.com/12372/android-recyclerview-example ##
##  ensuring images preserve their size in relation to the screen -> https://developer.android.com/training/multiscreen/screensizes.html    ##
    -> https://developer.android.com/guide/practices/screens_support.html#qualifiers ##

#### OBJECTIVES ####

*   Make a gallery for order food. Layout will be like that of just-eat. (possibly be using recycler view as there might be a lot of info to display)
*   ADD another Gallery for the hair stylists ( most likely a listview for this)
*   Add a toast message for when the user adds to the basket
*   Check which areas of the app will be using recycler view and start implementing
*   Research Adequate Database to use (Azure or SQL developer. could also use sql developer for a more visual view of the database
*   Add a logger in error prone and critical areas of the app. (log file will be maintained by a script which will clear file contents periodically)
*   Have a look at implementing Services and Content providers
*   Main page will now be a login screen (Main Activity will now be the login screen) and the old main activity will be page it transitions to when login is successful - sort out later
*   Have a logic where it refuses a booking if a user tries to book a hair appointment in a time slot that is smaller than the time it takes to do the hair.
*   have a look at configuration qualifiers for use for any images used in the app

####    FOR DATABASE    ####

*   finish database on management studio first and then transfer it to sql lite
*   https://developer.android.com/training/basics/data-storage/databases.html
    -   place all database related info in a different package - DONE
    -   create a separate class for all the database build queries and a different one to instantiate, run those queries and access the database
    -   try placing database schema in one file (all the strings and table names, etc...), and a file for the database queries and accessing the database. (make fields and etc.. private where necessary)
    -   close database connections on appropriate onDestroy() methods
    -   use Log.d for logging messages
*   must have a try-catch for any statements or queries sent to the database
* use try-catch for when user is performing read and write operations on the database.
    -   first statement in the try block will be a check for an internet connection.
        -   there will be a nested try block that will check if the external database was successfully updated. if updated, it will allow updating of the local database.


###############

*   tip from Ramnick -> use an android sqlite database and a server (so local and external server but less expensive network transactions). they will both be in sync and there will not need to be any expensive trasnfer of information such as images itself. instead
the transfer of info could just be things like ID and unique info that can help identify more information

*   ensure that when users perform actions that updates the database, there will be no duplicates or loss of information. ensure all databases are in sync.

###############

*   when specifying spaces between two views, use dp but when specifying text size use sp
    -dp (density independent)
    -sp (scale independent)

* take costumers numbers
    - remind them by text that they have an appointment



